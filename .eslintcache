[{"E:\\Work\\Synapps\\cvn\\src\\index.js":"1","E:\\Work\\Synapps\\cvn\\src\\reportWebVitals.js":"2","E:\\Work\\Synapps\\cvn\\src\\App.js":"3","E:\\Work\\Synapps\\cvn\\src\\store\\reducer.js":"4","E:\\Work\\Synapps\\cvn\\src\\store\\actions\\actionTypes.js":"5","E:\\Work\\Synapps\\cvn\\src\\components\\Home.js":"6","E:\\Work\\Synapps\\cvn\\src\\components\\NewsList.js":"7","E:\\Work\\Synapps\\cvn\\src\\components\\DetailsView.js":"8","E:\\Work\\Synapps\\cvn\\src\\store\\actions\\actions.js":"9","E:\\Work\\Synapps\\cvn\\src\\lang_menu.js":"10"},{"size":778,"mtime":1607700613143,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":529,"mtime":1607702163635,"results":"14","hashOfConfig":"12"},{"size":572,"mtime":1607744936853,"results":"15","hashOfConfig":"12"},{"size":85,"mtime":1607704245689,"results":"16","hashOfConfig":"12"},{"size":5939,"mtime":1608385245648,"results":"17","hashOfConfig":"12"},{"size":23399,"mtime":1608379960702,"results":"18","hashOfConfig":"12"},{"size":4899,"mtime":1608377998279,"results":"19","hashOfConfig":"12"},{"size":260,"mtime":1607704165858,"results":"20","hashOfConfig":"12"},{"size":1183,"mtime":1608377998312,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1arwoaq",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\Work\\Synapps\\cvn\\src\\index.js",[],["45","46"],"E:\\Work\\Synapps\\cvn\\src\\reportWebVitals.js",[],"E:\\Work\\Synapps\\cvn\\src\\App.js",["47"],"import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport './style.css';\n\nimport Home from \"./components/Home\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/\">\n                       <Home/>\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","E:\\Work\\Synapps\\cvn\\src\\store\\reducer.js",[],"E:\\Work\\Synapps\\cvn\\src\\store\\actions\\actionTypes.js",[],"E:\\Work\\Synapps\\cvn\\src\\components\\Home.js",["48","49"],"E:\\Work\\Synapps\\cvn\\src\\components\\NewsList.js",["50","51"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport Skeleton from 'react-loading-skeleton';\r\nimport {\r\n    Badge,\r\n    Col,\r\n    Form, \r\n    ListGroup, \r\n    Row,\r\n    Button,\r\n    InputGroup,\r\n    FormControl\r\n} from \"react-bootstrap\";\r\nimport {setArticle} from \"../store/actions/actions\";\r\nimport {FiX, FiSearch, FiInbox} from 'react-icons/fi';\r\nimport {connect} from \"react-redux\";\r\nimport ReactTimeAgo from 'react-time-ago'\r\nimport {Link} from \"react-router-dom\";\r\nimport { SphereSpinner } from \"react-spinners-kit\";\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport {languageMenu} from \"../lang_menu\";\r\n\r\nconst pageSize = 25;\r\nconst covers = Array(pageSize).fill(1);\r\n// const apiKey = \"7beb18d93a494e3ca347e870561b7045\";\r\n// const apiKey = \"b0c096bdabc740a18c9dd3dbc1675e39\";\r\nconst apiKey = \"e5a1a1aab4a04c0084fb9f9e6c19876f\";\r\n\r\nclass NewsList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            articles: {\r\n                data: [],\r\n                total: 0,\r\n                loading: true,\r\n                loadingmore: false\r\n            },\r\n            sourcesList: {\r\n                loading: true,\r\n                data: [],\r\n                founded: []\r\n            },\r\n            langsList: {\r\n                loading: true,\r\n                data: [],\r\n            },\r\n            filter: {\r\n                toggle: false,\r\n                sources: [],\r\n                language: \"\",\r\n                changed: false\r\n            },\r\n\r\n            page: 1,\r\n            sources: [],\r\n            language: \"\",\r\n            sortBy: \"publishedAt\",\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getNews(false);\r\n        this.getSources();\r\n    }\r\n\r\n    //  GET latest news base on user filter and orderinglangList\r\n    getNews = (loadingmore) => {\r\n        this.setState({\r\n            ...this.state,\r\n            articles: {\r\n                ...this.state.articles,\r\n                loading: !loadingmore\r\n            }   \r\n        }, () => {\r\n            let sources = [];\r\n            this.state.sources.map(source => {\r\n                let instance = source.toLowerCase().replace(/ /g, \"-\").replace(/[^\\w-]/g, \"\");\r\n                sources.push(instance);\r\n            });\r\n            axios.get('https://newsapi.org/v2/everything', {\r\n                    params: {\r\n                        q: 'COVID Vaccine',\r\n                        apiKey: apiKey,\r\n                        pageSize: pageSize,\r\n                        page: this.state.page,\r\n                        sources: sources.join(','),\r\n                        language: this.state.language,\r\n                        sortBy: this.state.sortBy\r\n                    }\r\n                })\r\n                .then((res) => {\r\n                    let data = res.data.articles;\r\n                    if (loadingmore) {\r\n                        data = Array.from(new Set([...this.state.articles.data, ...data]));\r\n                    }\r\n                    this.setState({\r\n                        ...this.state,\r\n                        articles: {\r\n                            data: data,\r\n                            total: res.data.totalResults,\r\n                            loading: false,\r\n                            loadingmore: false\r\n                        }\r\n                    });\r\n\r\n                })\r\n                .catch(function (err) {\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     articles: {\r\n                    //         ...this.state.articles,\r\n                    //         loading: false,\r\n                    //         loadingmore: false\r\n                    //     }\r\n                    // });\r\n                });\r\n            }\r\n        )\r\n    };\r\n\r\n\r\n    // Function to get all sources from api (containing languages and sources)\r\n    getSources = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            sourcesList: {\r\n                ...this.state.sourcesList,\r\n                loading: true\r\n            }   \r\n        }, \r\n        () => axios.get('https://newsapi.org/v2/sources', {\r\n                    params: {\r\n                        apiKey: apiKey,\r\n                    }\r\n                })\r\n                .then((res) => {\r\n                    let langs = [];\r\n                    res.data.sources.map(item => {\r\n                        langs.push(item.language);\r\n                    });\r\n                    langs = Array.from(new Set(langs));\r\n                    console.log(langs);\r\n                    this.setState({\r\n                        ...this.state,\r\n                        sourcesList: {\r\n                            data: res.data.sources,\r\n                            founded: res.data.sources,\r\n                            loading: false\r\n                        },\r\n                        langsList: {\r\n                            loading: false,\r\n                            data: langs\r\n                        }\r\n                    });\r\n                })\r\n                .catch(function (err) {\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     sourcesList: {\r\n                    //         ...this.state.sourcesList,\r\n                    //         loading: false\r\n                    //     }\r\n                    // });\r\n                })\r\n        )  \r\n    };\r\n\r\n\r\n    // Func to detect changing in filter options\r\n    filterHasChange = () => {\r\n        let isChanged = false;\r\n        if (JSON.stringify(this.state.filter.sources) !== JSON.stringify(this.state.sources) ||\r\n            this.state.filter.language !== this.state.language) {\r\n            isChanged = true;\r\n        }\r\n        return isChanged;\r\n    }\r\n\r\n    // Fanc to handle load more action\r\n    handleLoadMore = () => {\r\n        if(this.state.articles.total > this.state.articles.data.length) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    articles: {\r\n                        ...this.state.articles,\r\n                        loadingmore: true\r\n                    },\r\n                    page: this.state.page + 1\r\n                }, () => this.getNews(true)); \r\n        }\r\n        \r\n    }\r\n\r\n    //  Hanle change of sort value\r\n    handleSort = (event) => {\r\n        let sort = event.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            sortBy: sort\r\n        }, () => this.getNews(false));\r\n    };\r\n\r\n    // Handle Filter Toggle\r\n    handleFilterToggle = () => {\r\n        if (this.state.filter.toggle) {\r\n            this.setState({\r\n                ...this.state,\r\n                filter:{\r\n                    ...this.state.filter,\r\n                    toggle: false\r\n                }\r\n            }, () => document.body.classList.remove('overflow-hidden'));\r\n        } else {\r\n            this.setState({\r\n                ...this.state,\r\n                filter:{\r\n                    ...this.state.filter,\r\n                    changed: this.filterHasChange(),\r\n                    toggle: true\r\n                }\r\n            }, () => document.body.classList.add('overflow-hidden'));\r\n        }\r\n    }\r\n\r\n    // Func to handle language selecting\r\n    handleLanguageSelect = (lang) => {\r\n        this.setState({\r\n            ...this.state,\r\n            filter: {\r\n                ...this.state.filter,\r\n                language: lang,\r\n            }\r\n        }, () => {\r\n            this.setState({\r\n                ...this.state,\r\n                filter: {\r\n                    ...this.state.filter,\r\n                    changed: this.filterHasChange()\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    //  Func to handle source selecting \r\n    handleSourceSelect = (source) => {\r\n        let sources = Array.from(new Set([...this.state.filter.sources, source]));\r\n        this.setState({\r\n            ...this.state,\r\n            filter: {\r\n                ...this.state.filter,\r\n                sources: sources,\r\n            }\r\n        }, () => {\r\n            this.setState({\r\n                ...this.state,\r\n                filter: {\r\n                    ...this.state.filter,\r\n                    changed: this.filterHasChange()\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    // handle search source in filter sider\r\n    handleSourceSearch = (event) => {\r\n        let value = event.target.value.toString().toLowerCase();\r\n        let result = this.state.sourcesList.data.filter(source => source.name.toLowerCase().includes(value));\r\n        this.setState({\r\n            ...this.state,\r\n            sourcesList: {\r\n                ...this.state.sourcesList,\r\n                founded: result\r\n            }\r\n        });\r\n    }\r\n\r\n    // handle delete filter selecting items\r\n    handleDelete = (item, mode) => {\r\n        let language = this.state.filter.language;\r\n        let sources = this.state.filter.sources;\r\n        if (mode === \"source\") {\r\n            sources = this.state.filter.sources.filter(source => item !== source);\r\n        } else {\r\n            language = \"\";\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            filter: {\r\n                ...this.state.filter,\r\n                sources: sources,\r\n                language: language,\r\n            }\r\n        }, () => {\r\n            this.setState({\r\n                ...this.state,\r\n                filter: {\r\n                    ...this.state.filter,\r\n                    changed: this.filterHasChange()\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    // handle changed filter apply\r\n    handleApplyFilter = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            sources: this.state.filter.sources,\r\n            language: this.state.filter.language,\r\n            sourcesList: {\r\n                ...this.state.sourcesList,\r\n                founded: this.state.sourcesList.data\r\n            }, \r\n            filter: {\r\n                ...this.state.filter,\r\n                toggle: false\r\n            }\r\n        },() => {\r\n            document.body.classList.remove('overflow-hidden');\r\n            this.getNews(false);\r\n        });\r\n    };\r\n\r\n    // hadle delete all filters and reload data\r\n    handleCancelFilter = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            filter: {\r\n                ...this.state.filter,\r\n                language: \"\",\r\n                sources: []\r\n            }\r\n        },() => {\r\n            document.body.classList.remove('overflow-hidden');\r\n            this.handleApplyFilter();\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // filter container (sidder)\r\n        const filterContainer = <div className={\"right sider \" + (this.state.filter.toggle ? \" show \" : \"\") + (this.state.filter.changed || this.state.sources.length || this.state.language ? \"has-btn\" : \"\")}>\r\n            <div className=\"sider-header\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <h4 className=\"sider-title\">Filters</h4>\r\n                        <div className=\"close\" onClick={this.handleFilterToggle} >\r\n                            <FiX/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            <div className=\"sider-body scroll\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <h6 className=\"pb-2\">languages</h6>\r\n                        <ListGroup horizontal className=\"langs-list\">\r\n                            {\r\n                                this.state.langsList.loading ? \r\n                                    Array(14).fill(1).map(() => \r\n                                        <ListGroup.Item action className=\"text-center\">\r\n                                            <Skeleton width={45} height={30}/>\r\n                                            <Skeleton width={70}/>\r\n                                        </ListGroup.Item>\r\n                                    )\r\n                                :\r\n                                    this.state.langsList.data.map(lang => {\r\n                                        let isActive = false;\r\n                                        if (this.state.filter.language === lang) {\r\n                                            isActive = true;\r\n                                        }\r\n                                        let itemInfo = languageMenu.find(value => value.key === lang);\r\n                                        return (\r\n                                            <ListGroup.Item className=\"text-center\" action active={isActive} \r\n                                                onClick={() => {isActive ? this.handleDelete(lang, \"lang\") : this.handleLanguageSelect(lang)}}>\r\n                                                <ReactCountryFlag \r\n                                                    countryCode={itemInfo.code} \r\n                                                    svg\r\n                                                    style={{\r\n                                                        width: '2em',\r\n                                                        height: '2em',\r\n                                                    }}\r\n                                                    aria-label={lang} />\r\n                                                <span class=\"langs-title\">{itemInfo.title}</span>\r\n                                            </ListGroup.Item>\r\n                                        );\r\n                                    })\r\n                            }\r\n                        </ListGroup>\r\n                    </Col>\r\n                    <Col xs={12}>\r\n                        <h6 className=\"pb-2 pt-4\">sources</h6>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text id=\"search-source\">\r\n                                    <FiSearch/>\r\n                                    {/* <FiLoader/> */}\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                                placeholder=\"Search\"\r\n                                aria-label=\"Search\"\r\n                                aria-describedby=\"search-source\"\r\n                                onChange={this.handleSourceSearch}\r\n                                />\r\n                        </InputGroup>\r\n                        <ListGroup className=\"source-list\">\r\n                            {\r\n                                this.state.sourcesList.loading ?\r\n                                    Array(128).fill(1).map(() =>\r\n                                        <ListGroup.Item action>\r\n                                            <Skeleton/>\r\n                                        </ListGroup.Item>\r\n                                    )\r\n                                :\r\n                                    this.state.sourcesList.founded.length ?\r\n                                        this.state.sourcesList.founded.map(source => {\r\n                                            let isActive = false;\r\n                                            if (this.state.filter.sources.find(item => item === source.name)) {\r\n                                                isActive = true;\r\n                                            }\r\n                                            return (\r\n                                                <ListGroup.Item action active={isActive} onClick={() => this.handleSourceSelect(source.name)}>\r\n                                                    {source.name}\r\n                                                </ListGroup.Item>\r\n                                            );\r\n                                        })\r\n                                    :\r\n                                    <ListGroup.Item className=\"text-center\">\r\n                                        <FiInbox/>\r\n                                        <div>Not found!</div>\r\n                                    </ListGroup.Item>\r\n                            }                            \r\n                        </ListGroup>\r\n                        {\r\n                            this.state.filter.sources.map(source =>\r\n                                <div className=\"tag-item\">\r\n                                    <span>{source}</span>\r\n                                    <FiX className=\"close\" onClick={() => this.handleDelete(source, \"source\")}/>\r\n                                </div>\r\n                            )\r\n                        }   \r\n                    </Col>\r\n                    <Button variant='primary' onClick={this.handleApplyFilter}\r\n                        className={this.state.filter.changed && this.state.filter.toggle  ? \"apply-filter show\" : \"apply-filter\"}>\r\n                        Apply Filters\r\n                    </Button> \r\n                    <Button variant='outline-primary' onClick={this.handleCancelFilter}\r\n                        className={\r\n                            !this.state.filter.changed && (this.state.language || this.state.sources.length) ?\r\n                                \"cancel-filter show\" : \"cancel-filter\"\r\n                            }>\r\n                        Cancel Filters\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        </div>;\r\n\r\n        return (\r\n            <div>\r\n                <Row className=\"px-md-4 my-5\">\r\n                    <Col sm={12}>\r\n                        <div className=\"clearfix\">\r\n                            <Form.Group className=\"float-left d-flex\" controlId=\"exampleForm.ControlSelect2\">\r\n                                <Form.Label className=\"text-nowrap mr-sm-2 mt-2\">Sorted By:</Form.Label>\r\n                                <Form.Control onChange={this.handleSort} as=\"select\">\r\n                                    <option value=\"publishedAt\">Date published</option>\r\n                                    <option value=\"relevancy\">Relevancy</option>\r\n                                    <option value=\"popularity\">Popularity</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <div className=\"float-right filter-sidebar\">\r\n                                <Button variant=\"secondary\" onClick={this.handleFilterToggle}>\r\n                                    Filter\r\n                                </Button>\r\n\r\n                                {filterContainer}\r\n\r\n                                <div className={this.state.filter.toggle ? \"show sider-backdrop\" : \"sider-backdrop\"} \r\n                                    onClick={this.handleFilterToggle}/>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        {\r\n                            this.state.articles.data.length || this.state.articles.loading ?\r\n                                <ListGroup className=\"news-list\">\r\n                                    { \r\n                                        this.state.articles.loading ? // Preview Loading until syncing news \r\n                                            covers.map(\r\n                                                () =>   <ListGroup.Item className=\"my-2\" action>\r\n                                                            <Skeleton width={80} height={30} className=\"rounded-pill\"/>\r\n                                                            <Skeleton height={30} className=\"mb-2\"/>\r\n                                                            <Skeleton width={70} className=\"mr-2\" />\r\n                                                            <Skeleton width={100}/>\r\n                                                        </ListGroup.Item>\r\n                                            )\r\n                                        : \r\n                                        this.state.articles.data.map(\r\n                                            article =>\r\n                                            <Link to={encodeURIComponent(article.title).replace(/\\s+/g, '-').toLowerCase()}\r\n                                                onClick={() => this.props.setArticle(article)}>\r\n                                                <ListGroup.Item className=\"my-2\" action>\r\n                                                    <Badge variant=\"primary\" className=\"mb-2\">{article.source.name}</Badge>\r\n\r\n                                                    <h4>\r\n                                                        {article.title}\r\n                                                    </h4>\r\n\r\n                                                    <div className=\"d-md-flex\">\r\n                                                        {\r\n                                                            article.author === null ?\r\n                                                                \"\"\r\n                                                                :\r\n                                                                <div className=\"text-info mr-3\">{article.author}</div>\r\n                                                        }\r\n                                                        <div className=\"text-secondary text-nowrap\">\r\n                                                            <ReactTimeAgo date={article.publishedAt} locale=\"en-US\"/>\r\n                                                        </div>\r\n                                                    </div>\r\n\r\n                                                </ListGroup.Item>\r\n                                            </Link>\r\n                                        )\r\n                                    }\r\n                                </ListGroup>\r\n                            :\r\n                                <div className=\"text-center\">\r\n                                    <h1>No Result Found!</h1>\r\n                                </div>  \r\n                        }\r\n                        {\r\n                            this.state.articles.loading || !this.state.articles.data.length ?\r\n                                null\r\n                            :\r\n                                <div className=\"text-center mt-3 mx-auto\" style={{width: \"203px\" }}>\r\n                                    {this.state.articles.loadingmore ? \r\n                                        <div className=\"d-flex bg-secondary px-5 py-2 rounded-pill\">\r\n                                            <SphereSpinner size={25} color=\"#5A33E4\" loading />\r\n                                            <span className=\"ml-3\">Loading</span>\r\n                                        </div>\r\n                                    :\r\n                                        <Button className=\"px-4\" onClick={this.handleLoadMore}>Load More</Button>\r\n                                    }\r\n                                </div>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setArticle: (article) => dispatch(setArticle(article))\r\n    }\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(NewsList);","E:\\Work\\Synapps\\cvn\\src\\components\\DetailsView.js",[],"E:\\Work\\Synapps\\cvn\\src\\store\\actions\\actions.js",[],"E:\\Work\\Synapps\\cvn\\src\\lang_menu.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":12,"column":5,"nodeType":"58","messageId":"59","endLine":14,"endColumn":6},{"ruleId":"60","severity":1,"message":"61","line":7,"column":5,"nodeType":"62","messageId":"63","endLine":7,"endColumn":9},{"ruleId":"64","severity":1,"message":"65","line":141,"column":29,"nodeType":"66","endLine":141,"endColumn":77},{"ruleId":"67","severity":1,"message":"68","line":77,"column":43,"nodeType":"69","messageId":"70","endLine":77,"endColumn":45},{"ruleId":"67","severity":1,"message":"68","line":139,"column":47,"nodeType":"69","messageId":"70","endLine":139,"endColumn":49},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]